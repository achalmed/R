[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee @knuth84 for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "1-Introduccion-R/index.html",
    "href": "1-Introduccion-R/index.html",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "",
    "text": "4 ¿Qúe nos ofrece RStudio?"
  },
  {
    "objectID": "1-Introduccion-R/index.html#paso-1.-descargar-r-en-ubuntu-linux",
    "href": "1-Introduccion-R/index.html#paso-1.-descargar-r-en-ubuntu-linux",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "3.1 Paso 1. Descargar R en Ubuntu Linux",
    "text": "3.1 Paso 1. Descargar R en Ubuntu Linux\nPara comenzar, necesitarás descargar el paquete de instalación de R desde el sitio web oficial de R. Abre tu navegador web y sigue este enlace: Enlace de descarga de R\n\nR es un lenguaje de programación ampliamente utilizado en la comunidad estadística y de análisis de datos, y es especialmente popular entre los científicos de datos y los investigadores."
  },
  {
    "objectID": "1-Introduccion-R/index.html#paso-2.-instalar-r-en-ubuntu-linux",
    "href": "1-Introduccion-R/index.html#paso-2.-instalar-r-en-ubuntu-linux",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "3.2 Paso 2. Instalar R en Ubuntu Linux",
    "text": "3.2 Paso 2. Instalar R en Ubuntu Linux\nLos paquetes para la versión actual de R 4.2 están disponibles para la mayoría de las versiones estables de Ubuntu Desktop. Sin embargo, solo la última versión de Soporte a Largo Plazo (LTS) cuenta con soporte completo. A partir del 2 de mayo de 2022, las versiones compatibles son:\n\nJammy Jellyfish (22.04, solo amd64)\nImpish Indri (21.10, solo amd64)\nFocal Fossa (20.04; LTS y solo amd64)\nBionic Beaver (18.04; LTS)\nXenial Xerus (16.04; LTS)\n\nEjecuta estas líneas (si eres root, omite sudo) para informar a Ubuntu sobre los binarios de R en CRAN.\n# Actualizar índices\nsudo apt update -qq\n# Instalar dos paquetes auxiliares necesarios\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# Agregar la clave de firma (de Michael Rutter) para estos repositorios\n# Para verificar la clave, ejecuta: gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# Huella digital: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# Agregar el repositorio de R 4.0 de CRAN -- ajustar 'focal' a 'groovy' o 'bionic' según sea necesario\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\nAquí utilizamos lsb_release -cs para acceder a la versión de Ubuntu que estás utilizando: “jammy”, “impish”, “focal”, “bionic”, …\nLuego, ejecuta\nsudo apt install --no-install-recommends r-base"
  },
  {
    "objectID": "1-Introduccion-R/index.html#obtén-más-de-5000-paquetes-de-cran",
    "href": "1-Introduccion-R/index.html#obtén-más-de-5000-paquetes-de-cran",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "3.3 Obtén más de 5000 paquetes de CRAN",
    "text": "3.3 Obtén más de 5000 paquetes de CRAN\nEjecuta este comando (como root o agregando sudo como prefijo) para agregar el repositorio actual de R 4.0 o posterior ‘c2d4u’:\nsudo add-apt-repository ppa:c2d4u.team/c2d4u4.0+\npara agregar el ID de clave de este repositorio, agregar el repositorio y actualizar el índice. Ahora puedes hacer apt install --no-install-recommends r-cran-rstan o apt install --no-install-recommends r-cran-tidyverse (nuevamente como usuario root o a través de sudo)."
  },
  {
    "objectID": "1-Introduccion-R/index.html#paso-3.-descargar-rstudio-en-ubuntu-linux",
    "href": "1-Introduccion-R/index.html#paso-3.-descargar-rstudio-en-ubuntu-linux",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "3.4 Paso 3. Descargar RStudio en Ubuntu Linux",
    "text": "3.4 Paso 3. Descargar RStudio en Ubuntu Linux\nPuedes descargar la última versión de RStudio desde su sitio web oficial: Enlace de descarga de RStudio\n\nRStudio RStudio es un entorno de desarrollo integrado (IDE) muy popular para trabajar con R. Proporciona una interfaz gráfica intuitiva y muchas herramientas útiles para la programación en R."
  },
  {
    "objectID": "1-Introduccion-R/index.html#paso-4.-instalar-rstudio-en-ubuntu-linux",
    "href": "1-Introduccion-R/index.html#paso-4.-instalar-rstudio-en-ubuntu-linux",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "3.5 Paso 4. Instalar RStudio en Ubuntu Linux",
    "text": "3.5 Paso 4. Instalar RStudio en Ubuntu Linux\n\n3.5.1 Instalar dependencias\nAntes de instalar RStudio, es posible que debas instalar algunas dependencias en tu sistema. Abre la terminal y ejecuta los siguientes comandos para instalar las dependencias requeridas:\nsudo apt update\nsudo apt install gdebi-core\nEstos comandos actualizarán los repositorios de paquetes y luego instalarán gdebi-core, una utilidad necesaria para instalar paquetes .deb de forma sencilla y para resolver dependencias automáticamente.\n\n\n3.5.2 Instalar RStudio\nUna vez que hayas descargado el archivo de instalación de RStudio y hayas instalado las dependencias necesarias, puedes proceder con la instalación. Ve al directorio donde descargaste el archivo de instalación y ejecuta el siguiente comando en la terminal:\nsudo gdebi &lt;nombre_del_archivo_de_instalación&gt;.deb\nReemplaza &lt;nombre_del_archivo_de_instalación&gt; con el nombre real del archivo de instalación descargado.\nEl comando gdebi instalará RStudio y resolverá automáticamente las dependencias necesarias."
  },
  {
    "objectID": "1-Introduccion-R/index.html#paso-5.-iniciar-rstudio",
    "href": "1-Introduccion-R/index.html#paso-5.-iniciar-rstudio",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "3.6 Paso 5. Iniciar RStudio",
    "text": "3.6 Paso 5. Iniciar RStudio\nUna vez completada la instalación, puedes iniciar RStudio desde el menú de aplicaciones de Ubuntu o ejecutando el siguiente comando en la terminal:\nrstudio\nRStudio se abrirá en una ventana separada, lo que te permitirá comenzar a trabajar con R y aprovechar todas las funciones y características que ofrece el IDE."
  },
  {
    "objectID": "1-Introduccion-R/index.html#beneficios-del-software-rstudio",
    "href": "1-Introduccion-R/index.html#beneficios-del-software-rstudio",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "4.1 Beneficios del software RStudio",
    "text": "4.1 Beneficios del software RStudio\nRStudio es una herramienta poderosa que brinda numerosas ventajas para los usuarios. A continuación, destacamos algunas de las funcionalidades que ofrece:\n\nPotente editor de código: RStudio proporciona un entorno de desarrollo integrado (IDE) que cuenta con un editor de código robusto. Este editor permite escribir, editar y ejecutar código de manera eficiente, lo que facilita el trabajo con el lenguaje de programación R.\nGestión del espacio de trabajo: RStudio ofrece características avanzadas para el manejo del espacio de trabajo. Puedes explorar y administrar fácilmente los objetos, variables y funciones utilizados en tu sesión de R, lo que facilita el seguimiento y la organización de tus datos y resultados.\nDepuración y resaltado de sintaxis: La función de depuración de RStudio te permite identificar y corregir errores en tu código de manera eficiente. Además, el resaltado de sintaxis te ayuda a visualizar y comprender mejor la estructura de tu código, lo que facilita su lectura y mantenimiento.\nAutocompletado inteligente: RStudio ofrece una función de autocompletado inteligente, que te sugiere opciones de código a medida que escribes. Esto acelera el proceso de codificación al proporcionar sugerencias contextuales y facilitar la escritura correcta de las funciones y objetos de R.\nInteroperabilidad con otros software y plataformas: RStudio es compatible con una amplia gama de herramientas y plataformas. Puedes integrar fácilmente tus análisis en flujos de trabajo existentes, colaborar con otros profesionales y compartir tus resultados en diferentes formatos, como informes, gráficos interactivos o aplicaciones web.\n\n\n\n\nInterfaz de RStudio: Una poderosa herramienta para el desarrollo en R"
  },
  {
    "objectID": "1-Introduccion-R/index.html#archivos-de-script-en-r-.r",
    "href": "1-Introduccion-R/index.html#archivos-de-script-en-r-.r",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "4.2 Archivos de Script en R (.R)",
    "text": "4.2 Archivos de Script en R (.R)\nEn el mundo del análisis de datos y programación en R, los archivos de script (.R) desempeñan un papel fundamental. Estos archivos contienen la secuencia de comandos necesaria para realizar análisis y manipulación de datos de manera sistemática y reproducible.\n\n4.2.1 Ventajas de utilizar archivos de script en R:\n\nDocumentación de tareas: Al escribir nuestros comandos en un archivo de script, estamos creando una documentación detallada de los pasos y procesos utilizados en nuestro análisis. Esto facilita la comprensión y revisión de nuestro trabajo, tanto para nosotros mismos como para otros colaboradores.\nAutomatización de tareas repetitivas: Los archivos de script permiten automatizar tareas que se repiten con frecuencia. Podemos definir una serie de comandos en el archivo y ejecutarlos de forma rápida y eficiente cada vez que sea necesario. Esto ahorra tiempo y reduce la posibilidad de errores.\nEvaluación de cambios: Al tener nuestros comandos en un archivo de script, podemos realizar modificaciones y ajustes en el análisis de manera más ágil. Podemos realizar pruebas y evaluaciones de los cambios sin necesidad de volver a escribir todo el código desde cero. Esto nos brinda flexibilidad y nos permite iterar y mejorar nuestro análisis de manera más eficiente.\n\n\n\n4.2.2 Creando y Ejecutando un Script en RStudio\nLos scripts nos permiten escribir y ejecutar una serie de comandos de manera secuencial, lo que facilita la automatización y reproducción de tareas en nuestros análisis de datos.\nPaso 1: Crear un nuevo archivo de script\nEn primer lugar, abrimos RStudio y creamos un nuevo archivo de script. Para hacer esto, seleccionamos “Archivo” en la barra de menú, luego “Nuevo archivo” y finalmente “Script R”. Esto abrirá un nuevo editor de texto donde podemos escribir nuestro código.\n\n\nPaso 2: Escribir el código en el script\nUna vez que tenemos nuestro archivo de script abierto, podemos comenzar a escribir nuestro código en R. Podemos utilizar cualquier comando o función de R en el script para realizar análisis de datos, manipulación de variables, visualización, entre otros. Es importante asegurarse de que el código esté escrito correctamente y tenga una sintaxis válida.\n\n\n# Este es un ejemplo de un script básico en R\n\n# Comentario de una línea: los comentarios se utilizan para agregar notas o explicaciones al código\n\n# Variables\nnombre &lt;- \"Juan\" # Variable de tipo texto (cadena de caracteres)\nedad &lt;- 25 # Variable numérica\n\n# Imprimir en la consola\ncat(\"Hola,\", nombre, \"tienes\", edad, \"años.\\n\")\n\n# Operaciones aritméticas\nsuma &lt;- 10 + 5\nresta &lt;- 10 - 5\nmultiplicacion &lt;- 10 * 5\ndivision &lt;- 10 / 5\n\n# Imprimir los resultados\ncat(\"La suma es:\", suma, \"\\n\")\ncat(\"La resta es:\", resta, \"\\n\")\ncat(\"La multiplicación es:\", multiplicacion, \"\\n\")\ncat(\"La división es:\", division, \"\\n\")\n\nPaso 3: Ejecutar el script\nUna vez que hemos escrito nuestro código en el archivo de script, podemos ejecutarlo para obtener los resultados deseados. Para hacer esto, podemos utilizar el atajo de teclado “Ctrl + Enter” o simplemente hacer clic en el botón “Ejecutar” en la parte superior del editor de texto.\n\nRStudio ejecutará el código línea por línea y mostrará los resultados en la consola.\n\nPaso 4: Guardar el script\nEs importante guardar regularmente nuestro script para evitar perder nuestro trabajo. Para guardar el archivo de script, seleccionamos “Archivo” en la barra de menú y luego “Guardar” o “Guardar como”.\n\nPodemos elegir una ubicación y un nombre de archivo apropiados para guardar nuestro script.\n\n\nPaso 5: Continuar escribiendo y ejecutando el código\nPodemos continuar escribiendo y ejecutando más código en nuestro script según nuestras necesidades. Podemos agregar nuevas líneas de código, modificar las existentes o eliminar las que ya no necesitamos. Es recomendable guardar el script regularmente a medida que realizamos cambios.\nPaso 6: Exportar los resultados (opcional)\nSi deseamos guardar los resultados de nuestro análisis, podemos exportarlos a archivos o formatos específicos. Por ejemplo, podemos guardar tablas de datos en archivos CSV, gráficos en imágenes o informes en formatos de texto. Esto nos permite compartir y utilizar los resultados fuera de RStudio.\n\nRecuerda que practicar y experimentar con diferentes comandos y funciones en RStudio te ayudará a familiarizarte con el entorno y mejorar tus habilidades de programación en R. ¡Diviértete explorando el mundo del análisis de datos con RStudio!"
  },
  {
    "objectID": "1-Introduccion-R/index.html#shortcuts",
    "href": "1-Introduccion-R/index.html#shortcuts",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "4.3 Shortcuts",
    "text": "4.3 Shortcuts\nAquí tienes una tabla con algunos atajos de teclado útiles en RStudio para usuarios de Ubuntu Linux:\n\n\n\n\n\n\n\nAcción\nAtajo de teclado\n\n\n\n\nEjecutar el código / selección actual y saltar a la línea siguiente\nCtrl + Enter\n\n\nEjecutar el código / selección actual y no saltar a la línea siguiente\nAlt + Enter\n\n\nEjecutar línea de código\nShift + Enter\n\n\nComentar/descomentar línea de código\nCtrl + Shift + C\n\n\nCopiar línea de código\nCtrl + Shift + D\n\n\nPegar línea de código\nCtrl + Shift + V\n\n\nIr a la línea\nCtrl + G\n\n\nIr al inicio del documento\nCtrl + Home\n\n\nIr al final del documento\nCtrl + End\n\n\nCompletar código\nTab\n\n\nAbrir ayuda\nF1\n\n\nGuardar el archivo actual\nCtrl + S\n\n\nCerrar archivo\nCtrl + W\n\n\nDeshacer\nCtrl + Z\n\n\nRehacer\nCtrl + Y\n\n\nAbrir consola de R\nCtrl + Shift + Enter\n\n\nBuscar en el archivo\nCtrl + F\n\n\nBuscar y reemplazar en el archivo\nCtrl + Shift + F\n\n\nColapsar/expandir bloque de código\nCtrl + Shift +\n\n\nAumentar tamaño de fuente\nCtrl + +\n\n\nDisminuir tamaño de fuente\nCtrl + -\n\n\nNuevo archivo Script R\nShift + Ctrl + N\n\n\nAbrir archivo\nCtrl + O\n\n\nEjecutar todo el script\nCtrl + Alt + R\n\n\nEjecutar el código desde el principio hasta la línea actual\nCtrl + Alt + B\n\n\nEjecutar el código desde la línea actual hasta el final\nCtrl + Alt + E\n\n\nMover el cursor al editor de código fuente\nCtrl + 1\n\n\nMover el cursor a la consola\nCtrl + 2\n\n\nEliminar selección actual\nCtrl + D\n\n\nLimpiar consola\nCtrl + L\n\n\nNavegar por el historial de la consola\narriba/abajo\n\n\nMover la línea de código arriba y abajo (evita el trabajo de copiar y pegar)\nAlt + arriba/abajo\n\n\nInterrumpir el comando en ejecución\nEsc\n\n\n\nEstos atajos de teclado te ayudarán a agilizar tu flujo de trabajo en RStudio en Ubuntu Linux. Recuerda que también puedes personalizar los atajos de teclado según tus preferencias en la sección de configuración de RStudio."
  },
  {
    "objectID": "1-Introduccion-R/index.html#espacio-de-trabajo-.rdata",
    "href": "1-Introduccion-R/index.html#espacio-de-trabajo-.rdata",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "4.4 Espacio de trabajo (.Rdata)",
    "text": "4.4 Espacio de trabajo (.Rdata)\nEl espacio de trabajo en R consiste en todos los objetos que se crean o cargan durante una sesión de R.\n\n4.4.1 Creación de objetos de datos\n\nUtiliza el operador de asignación (&lt;-) para crear un objeto de datos. Por ejemplo: mi_objeto &lt;- c(1, 2, 3, 4, 5).\n\n\n\nSelecciona todo el código que contiene los objetos de datos y ejecútalo en la consola de RStudio.\n\n\n\nEl código se evaluará y los objetos de datos se crearán en el espacio de trabajo. Sin embargo, no verás ningún resultado en la consola.\n\n\nLos objetos de datos creados se almacenan en el entorno global, que es parte del espacio de trabajo de R.\n\n\n4.4.2 Inspección de objetos de datos\nPuedes inspeccionar los objetos de datos haciendo clic sobre ellos en el panel de entorno o en el panel de objetos. Esto abrirá una vista previa del objeto en un nuevo archivo. Ten en cuenta que esta vista previa no afecta los objetos en el espacio de trabajo y se puede cerrar sin perder ninguna información.\n\n\n\n4.4.3 Guardado del espacio de trabajo\nEn RStudio, puedes guardar todos los objetos en tu espacio de trabajo en un archivo llamado .Rdata. Esta función te permite almacenar y cargar el espacio de trabajo completo en futuras sesiones de RStudio.\nPara guardar el espacio de trabajo, simplemente ve al menú “Session” y selecciona “Save Workspace As…”. A continuación, elige la ubicación y el nombre de archivo deseados para guardar el archivo .Rdata.\n\nEsta función es especialmente útil cuando trabajas en proyectos largos o cuando deseas retomar tu trabajo en otro momento sin tener que volver a crear o cargar manualmente todos los objetos y configuraciones.\n\nRecuerda que al guardar y cargar el espacio de trabajo, asegúrate de mantener un respaldo de tus archivos en caso de cualquier eventualidad. ¡Disfruta de la conveniencia de mantener tus objetos y configuraciones en tu espacio de trabajo guardado!\n\n\n\n4.4.4 Carga del espacio de trabajo\nPara cargar el espacio de trabajo previamente guardado, sigue estos pasos:\n\nAbre RStudio y ve al menú “Session” en la barra de herramientas superior.\nSelecciona la opción “Cargar” del menú desplegable.\nAparecerá una ventana emergente que te permite buscar el archivo .Rdata que contiene tu espacio de trabajo guardado. Navega hasta la ubicación donde guardaste el archivo.\nSelecciona el archivo .Rdata y haz clic en el botón “Abrir”.\nRStudio cargará automáticamente el archivo y restaurará todos los objetos y sus valores en tu entorno de trabajo actual.\n\n\nUna vez completados estos pasos, podrás acceder a todos los objetos y continuar trabajando con ellos como lo hiciste en la sesión en la que guardaste el espacio de trabajo.\n\n¡Con esta opción de carga, podrás retomar fácilmente tus proyectos anteriores y continuar donde lo dejaste sin tener que volver a crear los objetos desde cero!"
  },
  {
    "objectID": "1-Introduccion-R/index.html#historial-.rhistory",
    "href": "1-Introduccion-R/index.html#historial-.rhistory",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "4.5 Historial (.Rhistory)",
    "text": "4.5 Historial (.Rhistory)\nEl archivo de historial es un archivo de texto que registra todos los comandos ejecutados durante una sesión de RStudio.\n\n4.5.1 Inspección del historial de comandos\nPuedes ver el historial de comandos ejecutados durante tu sesión de trabajo haciendo clic en la pestaña “History” en la parte superior derecha de la ventana de RStudio. Aquí encontrarás una lista de todos los comandos ejecutados, lo que te permite revisarlos y volver a utilizarlos según sea necesario.\n\n\n\n4.5.2 Guardado del historial de comandos\nSi deseas guardar tu historial de comandos, puedes hacerlo en cualquier momento durante tu sesión de trabajo. Esto te permitirá acceder a tus comandos previos en futuras sesiones.\nSi deseas guardar tu historial de comandos en RStudio, sigue estos pasos:\n\nEn el panel de superior derecha selecciona la opción “Save History” (Guardar Historial).\nAparecerá una ventana emergente que te permitirá seleccionar la ubicación y el nombre de archivo para guardar tu historial de comandos. El archivo tendrá una extensión .Rhistory por defecto.\nElige la ubicación donde deseas guardar el archivo y asigna un nombre descriptivo para identificarlo fácilmente.\nHaz clic en el botón “Guardar” para guardar el historial de comandos en el archivo seleccionado.\n\n\n\n\n4.5.3 Reutilización del historial de comandos\nEl historial se guarda en un archivo llamado .Rhistory. Puedes reutilizar todo el historial de comandos haciendo clic en el archivo .Rhistory o con el nombre asignado. Luego, puedes copiarlos y pegarlos en tu archivo de script actual.\n\nInserta un código de línea seleccionado de .Rhistory en un archivo de script nuevo.\n\n\n¡Explora y aprovecha al máximo el espacio de trabajo y el historial en RStudio para mejorar tu flujo de trabajo y aprovechar al máximo tus comandos y objetos de datos!"
  },
  {
    "objectID": "1-Introduccion-R/index.html#tipos-de-datos",
    "href": "1-Introduccion-R/index.html#tipos-de-datos",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "5.1 Tipos de datos",
    "text": "5.1 Tipos de datos\nEn R, es fundamental comprender los diferentes tipos de datos disponibles. A continuación, exploraremos los tres tipos básicos de datos en R y cómo se utilizan en la programación.\n\n5.1.1 1. Tipos de datos numéricos\nLos datos numéricos en R se dividen en dos tipos principales:\n\nNúmeros reales, se conoce como double. Estos son los números más comunes y se utilizan para representar valores decimales. Por ejemplo, 3.14 y 2.71828 son números reales en R. La precisión de los números reales en R depende de la máquina en la que se ejecuta el programa.\nNúmeros enteros, se conoce como integer. Estos son números que no contienen decimales y se utilizan para representar valores enteros. Por ejemplo, 1, 2, -5 son ejemplos de números enteros en R. Los números enteros se utilizan cuando no se requiere precisión decimal.\n\n\n\n5.1.2 2. Tipo de datos lógico\nEl tipo de dato lógico en R se conoce como booleano. Este tipo de dato puede tener uno de dos valores: TRUE o FALSE. Los valores booleanos se utilizan principalmente para realizar operaciones de comparación y evaluación lógica en los programas. Por ejemplo, se puede usar una expresión lógica para verificar si una condición es verdadera o falsa.\n\n\n5.1.3 3. Tipo de datos carácter\nEl tipo de dato carácter en R se utiliza para almacenar letras text y símbolos strings. Los datos de tipo carácter se definen utilizando comillas simples (’‘) o comillas dobles (““). Por ejemplo,”Hola” y ’RStudio’ son ejemplos de datos de tipo carácter en R. Los datos de tipo carácter se utilizan con frecuencia para almacenar texto legible por humanos, como nombres, descripciones o mensajes.\n\nEs importante comprender estos tipos de datos en R, ya que nos permiten manipular y realizar operaciones en los datos de manera adecuada. Cada tipo de dato tiene sus propias características y funciones asociadas que nos permiten realizar tareas específicas en la programación."
  },
  {
    "objectID": "1-Introduccion-R/index.html#estructura-de-datos",
    "href": "1-Introduccion-R/index.html#estructura-de-datos",
    "title": "3  Descargando e instalando R y RStudio",
    "section": "5.2 Estructura de datos",
    "text": "5.2 Estructura de datos\nLas estructuras de datos nos permiten organizar y manipular la información de manera eficiente. A continuación, exploraremos las principales estructuras de datos disponibles en R y cómo se utilizan en la programación.\n\n5.2.1 1. Escalar\nUn escalar es un dato individual, como un número o una palabra, que no está agrupado con otros elementos. En R, los escalares pueden ser de diferentes tipos de datos, como numéricos, lógicos o caracteres. Estos datos se utilizan cuando solo necesitamos almacenar una única observación.\n\n\n5.2.2 2. Vector\nUn vector es una colección ordenada de elementos del mismo tipo de dato. Puede contener números, valores lógicos o caracteres. En R, los vectores son utilizados para almacenar conjuntos de datos relacionados. Por ejemplo, podemos tener un vector de edades o un vector de nombres. Los vectores son una de las estructuras de datos más utilizadas en R y nos permiten realizar operaciones y cálculos de manera eficiente.\nVectores\nConcatenación de elementos con c(): Se utiliza la función c() para concatenar elementos y crear vectores en R.\n\nc(0.5, 0.6, 0.25) # números decimales (double)\n\n[1] 0.50 0.60 0.25\n\nc(9L, 10L, 11L, 12L, 13L) # números enteros (integer)\n\n[1]  9 10 11 12 13\n\nc(9:13) # secuencia de números enteros (integer sequence)\n\n[1]  9 10 11 12 13\n\nc(TRUE, FALSE, FALSE) # valores lógicos (logical)\n\n[1]  TRUE FALSE FALSE\n\nc(1 + 0i, 2 + 4i) # números complejos (complex)\n\n[1] 1+0i 2+4i\n\nc(\"a\", \"b\", \"c\") # caracteres (character)\n\n[1] \"a\" \"b\" \"c\"\n\n\nAcciones con vectores\n\nAsignar los vectores a nombres:\nCreamos un vector llamado “dbl” que contiene los números decimales 0.5, 0.6 y 0.25.\n\ndbl &lt;- c(0.5, 0.6, 0.25)\n\nCreamos un vector llamado “chr” que contiene los caracteres “a”, “b” y “c”.\n\nchr &lt;- c(\"a\", \"b\", \"c\")\n\nImprimir los vectores “dbl” y “chr” en la consola:\nVisualizamos en la consola el contenido del vector “dbl”, que son los números decimales 0.5, 0.6 y 0.25.\n\ndbl\n\n[1] 0.50 0.60 0.25\n\n\nVisualizamos en la consola el contenido del vector “chr”, que son los caracteres “a”, “b” y “c”.\n\nchr\n\n[1] \"a\" \"b\" \"c\"\n\n\nVerificar el número de elementos en “dbl” y “chr”:\nCalculamos y mostramos en la consola la longitud del vector “dbl”, que es 3.\n\nlength(dbl)\n\n[1] 3\n\n\nCalculamos y mostramos en la consola la longitud del vector “chr”, que es 3.\n\nlength(chr)\n\n[1] 3\n\n\nVerificar el tipo de dato de “dbl” y “chr”:\nVisualizamos en la consola el tipo de dato del vector “dbl”, que es “double” (números decimales).\n\ntypeof(dbl)\n\n[1] \"double\"\n\n\nVisualizamos en la consola el tipo de dato del vector “chr”, que es “character” (caracteres).\n\ntypeof(chr)\n\n[1] \"character\"\n\n\nCombinar dos vectores:\nSe puede combinar el vector “dbl” consigo mismo utilizando la función “c()”, creando un nuevo vector que contiene los elementos duplicados del vector original.\n\nc(dbl, dbl)\n\n[1] 0.50 0.60 0.25 0.50 0.60 0.25\n\n\nTambien se puede combina el vector “dbl” con el vector “chr” utilizando la función “c()”, creando un nuevo vector que contiene los elementos de ambos vectores concatenados.\n\nc(dbl, chr)\n\n[1] \"0.5\"  \"0.6\"  \"0.25\" \"a\"    \"b\"    \"c\"   \n\n\n\n\n\n\n\n\n\nNota\n\n\n\nEl cambio automático del tipo de datos del vector resultante se denomina coerción. La coerción garantiza que se mantiene el mismo tipo de datos para cada elemento del vector.\n\n\nOperaciones aritméticas con vectores\n\nDefinamos dos nuevos vectores numéricos llamados a y b con 4 elementos cada uno:\n\na &lt;- c(1, 2, 3, 4)\nb &lt;- c(10, 20, 30, 40)\n\nRealizamos una multiplicación escalar de a por 5, lo que significa que cada elemento en a se multiplica por 5:\n\na * 5\n\n[1]  5 10 15 20\n\n\nRealizamos una multiplicación de vectores entre a y b, lo que implica multiplicar cada elemento en a por el elemento correspondiente en b:\n\na * b\n\n[1]  10  40  90 160\n\n\nCreamos un nuevo vector numérico llamado v con longitud 5.\n\nv &lt;- c(1.1, 1.2, 1.3, 1.4, 1.5)\na * v\n\n[1] 1.1 2.4 3.9 5.6 1.5\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nLas operaciones aritméticas de los vectores se realizan por elementos. si dos vectores no tienen la misma longitud, el vector más corto se reciclará para que coincida con el más largo (en este caso, se vuelve a utilizar el primer elemento de a).\n\n\n\n\n5.2.3 3. Matriz\nUna matriz es una estructura bidimensional que contiene elementos organizados en filas y columnas. Todos los elementos de una matriz deben ser del mismo tipo de dato. Las matrices son útiles para almacenar datos tabulares, como una tabla de datos con variables en filas y observaciones en columnas. En R, podemos realizar operaciones matriciales y manipular los datos de manera eficiente utilizando esta estructura.\nMatrices\n\nCombinamos los vectores a y b, definidas anteriormente, por columnas utilizando la función cbind():\n\nA &lt;- cbind(a, b)\nA\n\n     a  b\n[1,] 1 10\n[2,] 2 20\n[3,] 3 30\n[4,] 4 40\n\n\nEsta opción combina los vectores a y b por columnas, creando una matriz A donde los elementos de a forman la primera columna y los elementos de b forman la segunda columna.\nCombinamos los vectores a y b por filas utilizando la función rbind():\n\nB &lt;- rbind(a, b)\nB\n\n  [,1] [,2] [,3] [,4]\na    1    2    3    4\nb   10   20   30   40\n\n\nEn esta opción, los vectores a y b se combinan por filas para crear una matriz B. Los elementos de a forman la primera fila y los elementos de b forman la segunda fila.\nCreamos una matriz a partir de los elementos de vector a utilizando la función matrix():\n\nA &lt;- matrix(a, ncol = 2, nrow = 2)\nA\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nAquí se utiliza la función matrix() para crear una matriz A a partir de los elementos del vector a. Se especifica que la matriz tendrá 2 columnas y 2 filas. Los argumentos nrow y ncol indican el número de filas y el número de columnas de que consta la matriz resultante.\nPara 4 elementos y ncol =2 la matriz sólo puede tener 2 filas. Por lo tanto no es necesario especificar ambos argumentos\n\nA &lt;- matrix(a, ncol = 2)\nA\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nEn esta variante, se crea una matriz A con 2 columnas y se ajusta automáticamente el número de filas según la longitud del vector a.\nPor defecto la matriz se rellena columna a columna (R trata internamente un objeto matriz como vector columna). si la matriz debe rellenarse fila a fila se requiere el argumento byrow = TRUE\n\nB &lt;- matrix(a, ncol = 2, byrow = TRUE)\nB\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\nEn esta opción, se crea una matriz B con 2 columnas y se especifica que los elementos del vector a se distribuirán por filas byrow = TRUE, es decir, los primeros elementos de a formarán la primera fila, los siguientes elementos formarán la segunda fila, y así sucesivamente.\n\nAcciones con matrices\n\nVerificamos el número de filas de la matriz A utilizando la función nrow():\n\nnrow(A)\n\n[1] 2\n\n\nEsta línea de código devuelve el número de filas de la matriz A.\nVerificamos el número de columnas de la matriz A utilizando la función ncol():\n\nncol(A)\n\n[1] 2\n\n\nAquí se obtiene el número de columnas de la matriz A.\nVerificamos la dimensión (número de filas y columnas) de la matriz A utilizando la función dim():\n\ndim(A)\n\n[1] 2 2\n\n\nEsta línea de código devuelve la dimensión de la matriz A en formato [nrow, ncol].\nCombinamos dos matrices A por columnas utilizando la función cbind() y almacenamos el resultado en D.wide:\n\nD.wide &lt;- cbind(A, A)\nD.wide\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    1    3\n[2,]    2    4    2    4\n\n\nEn esta línea se crea una nueva matriz D.wide que combina las matrices A y A por columnas.\nCombinamos dos matrices A por filas utilizando la función rbind() y almacenamos el resultado en D.long:\n\nD.long &lt;- rbind(A, A)\nD.long\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n[3,]    1    3\n[4,]    2    4\n\n\nAquí se crea una nueva matriz D.long que combina las matrices A y A por filas.\nCombinamos las matrices D.wide y D.long por columnas utilizando la función cbind() y almacenamos el resultado en D:\n\n# D &lt;- cbind(D.wide, D.long)\n\nEn esta línea se crea una nueva matriz D que combina las matrices D.wide y D.long por columnas.\n\nOperaciones aritméticas con matrices\n\nSuma de la matriz B consigo misma utilizando el operador +:\n\nB + B\n\n     [,1] [,2]\n[1,]    2    4\n[2,]    6    8\n\n\nEsta línea de código realiza la suma de la matriz B con ella misma.\nMultiplicación escalar de la matriz B por 2 utilizando el operador *:\n\nB * 2\n\n     [,1] [,2]\n[1,]    2    4\n[2,]    6    8\n\n\nAquí se realiza la multiplicación de cada elemento de la matriz B por 2.\nMultiplicación elemento a elemento de la matriz B consigo misma y almacenar el resultado en a:\n\na &lt;- B * B\na\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    9   16\n\n\nEn esta línea se realiza la multiplicación elemento a elemento de la matriz B con ella misma, y el resultado se almacena en la matriz a.\nMultiplicación de matrices utilizando el operador %*%:\n\nC &lt;- B %*% B\nC\n\n     [,1] [,2]\n[1,]    7   10\n[2,]   15   22\n\n\nAquí se realiza la multiplicación de matrices entre la matriz B y ella misma, y el resultado se almacena en la matriz C.\n\nOtras operaciones con matrices:\n\nTransposición de la matriz D.wide utilizando la función t():\n\nt(D.wide)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    1    2\n[4,]    3    4\n\n\nEsta línea de código transpone la matriz D.wide, es decir, intercambia las filas por columnas y viceversa.\nCálculo del determinante de la matriz B utilizando la función det():\n\ndet(B)\n\n[1] -2\n\n\nAquí se calcula el determinante de la matriz B.\nCálculo de la inversa de la matriz B utilizando la función solve() (solo si el determinante es diferente de 0):\n\nsolve(B)\n\n     [,1] [,2]\n[1,] -2.0  1.0\n[2,]  1.5 -0.5\n\n\nEn esta línea se calcula la inversa de la matriz B, siempre y cuando el determinante sea diferente de 0.\nCálculo de los valores propios (eigenvalues) de una matriz cuadrada y simétrica utilizando la función eigen():\n\neigen(B)\n\neigen() decomposition\n$values\n[1]  5.3722813 -0.3722813\n\n$vectors\n           [,1]       [,2]\n[1,] -0.4159736 -0.8245648\n[2,] -0.9093767  0.5657675\n\n\nAquí se calculan los valores propios de la matriz B. Esta operación solo es aplicable a matrices cuadradas y simétricas.\n\n\n\n5.2.4 4. Data frame\nUn data frame es una estructura similar a una matriz, pero más flexible. Puede contener columnas con diferentes tipos de datos, lo que lo hace ideal para almacenar conjuntos de datos heterogéneos. Los data frames son muy utilizados en el análisis de datos, ya que nos permiten manipular y explorar datos de manera eficiente. Podemos realizar operaciones de filtrado, selección y transformación en los data frames para obtener información significativa.\nCreación del data frame:\n\nCreamos vectores con diferentes tipos de datos, como números decimales (dbl), números enteros (int), valores lógicos (lgl) y caracteres (chr):\n\ndbl &lt;- c(0.5, 0.6, 0.25, 1.2, 0.333) # números decimales (double)\nint &lt;- c(9L, 10L, 11L, 12L, 13L) # números enteros (integer)\nlgl &lt;- c(TRUE, FALSE, FALSE, TRUE, TRUE) # valores lógicos (logical)\nchr &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\") # caracteres (character)\n\nCada vector tiene elementos que representan valores de su respectivo tipo de dato.\nUtilizamos la función data.frame() para combinar los vectores en un data frame llamado df:\n\ndf &lt;- data.frame(dbl, int, lgl, chr)\n\nEl data frame df se crea utilizando los vectores dbl, int, lgl y chr como columnas.\nMostamos el contenido del data frame en la consola:\n\ndf\n\n    dbl int   lgl chr\n1 0.500   9  TRUE   a\n2 0.600  10 FALSE   b\n3 0.250  11 FALSE   c\n4 1.200  12  TRUE   d\n5 0.333  13  TRUE   e\n\n\nEsto imprime el contenido del data frame df.\n\nAcciones con data frames:\n\nVerificamos el número de filas del data frame utilizando la función nrow():\n\nnrow(df)\n\n[1] 5\n\n\nEsta línea de código devuelve el número de filas en el data frame df.\nVerificamos el número de columnas del data frame utilizando la función ncol():\n\nncol(df)\n\n[1] 4\n\n\nAquí se obtiene el número de columnas en el data frame df.\nVerificamos la dimensión (número de filas y columnas) del data frame utilizando la función dim():\n\ndim(df)\n\n[1] 5 4\n\n\nEsta línea de código devuelve la dimensión del data frame df en formato [nrow, ncol], es decir, el número de filas y columnas que tiene el data frame.\n\n\n\n5.2.5 5. Lista\nUna lista es una estructura de datos genérica que puede contener diferentes objetos, como vectores, matrices, data frames o incluso otras listas. A diferencia de las otras estructuras, las listas no tienen restricciones en cuanto a los tipos de datos o la longitud de los componentes individuales. Las listas son muy flexibles y se utilizan cuando necesitamos almacenar objetos de diferentes tipos o estructuras complejas.\nCreación de la lista\n\nCreamos una variable a que contiene un escalar de tipo entero (1L):\n\na &lt;- 1L\n\nCreamos un vector numérico dbl con 5 elementos:\n\ndbl &lt;- c(0.5, 0.6, 0.25, 1.2, 0.333)\n\nCreamos un vector de caracteres chr con 3 elementos:\n\nchr &lt;- c(\"a\", \"b\", \"c\")\n\nCreamos un vector v con 4 elementos de tipo numérico:\n\nv &lt;- c(1.1, 1.2, 1.3, 1.4)\n\nCreamos una matriz mat de tamaño 2x2 a partir del vector v:\n\nmat &lt;- matrix(v, ncol = 2)\n\nLa matriz mat tiene 2 columnas y los elementos del vector v se llenan por columnas.\nCreamos una lista l que contiene los elementos a, dbl, chr y mat:\n\nl &lt;- list(a, dbl, chr, mat)\n\nLa lista l contiene estos elementos en ese orden.\nFinalmente, visualizamos el contenido de la lista en la consola:\n\nl\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 0.500 0.600 0.250 1.200 0.333\n\n[[3]]\n[1] \"a\" \"b\" \"c\"\n\n[[4]]\n     [,1] [,2]\n[1,]  1.1  1.3\n[2,]  1.2  1.4\n\n\nEsto imprime el contenido de la lista l.\n\n\nEs importante comprender estas estructuras de datos en R, ya que nos permiten organizar y manipular la información de manera efectiva. Cada estructura tiene sus propias características y funciones asociadas que nos facilitan el trabajo con los datos en la programación."
  }
]